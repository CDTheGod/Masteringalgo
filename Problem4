#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int max_oreos(int n, int k, vector<int> costs, vector<int> nums) {
  vector<int> dp(k + 1, 0);

  for (int i = 0; i < n; ++i) {
    int cost = costs[i];
    int num = nums[i];
    // Loop in reverse order to avoid overwriting better solutions
    for (int j = k; j >= cost; --j) {
      dp[j] = max(dp[j], num + dp[j - cost]);
    }
  }

  return dp[k];
}

int main() {
  int T;
  cin >> T;

  while (T--) {
    int n, k;
    cin >> n >> k;

    vector<int> costs(n), nums(n);
    for (int i = 0; i < n; ++i) {
      cin >> costs[i] >> nums[i];
    }

    cout << max_oreos(n, k, costs, nums) << endl;
  }

  return 0;
}
