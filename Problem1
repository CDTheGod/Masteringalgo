#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

long long compute_cost(const vector<int>& heights, int target_height, long long K) {
    long long cost = 0;
    for (int height : heights) {
        while (height > target_height) {
            cost += height;
            height--;
            if (cost > K) return cost; // Early exit if cost exceeds K
        }
    }
    return cost;
}

int minimize_max_height(vector<int>& heights, long long K) {
    int left = 0, right = *max_element(heights.begin(), heights.end());
    int result = right;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        long long cost = compute_cost(heights, mid, K);

        if (cost <= K) {
            result = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return result;
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int N;
        long long K;
        cin >> N >> K;

        vector<int> heights(N);
        for (int i = 0; i < N; ++i) {
            cin >> heights[i];
        }

        cout << minimize_max_height(heights, K) << endl;
    }

    return 0;
}
